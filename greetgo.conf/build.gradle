apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'signing'


group = 'kz.greetgo'

sourceCompatibility = 1.7
version = '0.1.5'

def nowDate = new Date()
def nowFormattedDate = nowDate.format("yyyy-MM-dd/HH:mm:ss")

jar {
  manifest {
    attributes 'Implementation-Title': project.name,
        'Implementation-Version': version, 'Implementation-Vendor': 'greetgo!',
        'Built-By': System.getProperty("user.name"), 'Built-At': nowFormattedDate
  }
}

eclipse.project.natures 'org.springsource.ide.eclipse.gradle.core.nature'

eclipse {
  jdt {
    //
    // if you want to alter the java versions (by default they are configured with
    // gradle java plugin settings):
    //
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
  }
}

project.eclipse.classpath.file.whenMerged { cp ->
  if (project.hasProperty("sourceCompatibility")) {
    cp.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {

      it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/" +
          "JavaSE-$project.sourceCompatibility"
    }
  }
}

repositories {
  mavenLocal()
  if (System.getenv('GG_REPO') != null && System.getenv('GG_REPO').length() > 0) {
    maven { url System.getenv('GG_REPO') }
  }
  mavenCentral()
}

configurations { repoUpload }

dependencies {
  testCompile 'org.testng:testng:6.11'
  testCompile 'org.easytesting:fest-assert-core:2.0M10'

  compile 'com.google.code.findbugs:annotations:2.0.1'

  // needed for DAV protocol on maven uploads
  repoUpload "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0-beta-6"
}

test { useTestNG() }

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.archives
    repository(
        url: System.getenv('GG_REPO')
    )

    pom.project {
      name project.name
      packaging 'jar'
    }
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

artifacts {
  archives javadocJar, sourcesJar
}

if (System.getenv('LIB_SIGN_GPG_KEY_ID') != null && System.getenv('LIB_SIGN_GPG_KEY_ID').length() > 0) {

  gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
      allprojects { ext."signing.keyId" = System.getenv('LIB_SIGN_GPG_KEY_ID') }
      allprojects { ext."signing.secretKeyRingFile" = System.getenv('LIB_SIGN_GPG_KEY_LOCATION') }
      allprojects { ext."signing.password" = System.getenv('LIB_SIGN_GPG_KEY_PASSWORD') }
    }
  }

}

signing {
  sign configurations.archives
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

project.tasks.create('uploadToMavenCentral', Upload.class) {
  configuration = configurations.archives
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      pom.project {
        name project.name
        packaging 'jar'

        description 'Hot configs. To manage apllication configuration'
        url 'http://tech.greetgo.kz/libs/greetgo/conf.php'

        scm {
          connection 'scm:git:https://github.com/greetgo/conf'
          developerConnection 'scm:git:https://github.com/greetgo/conf'
          url 'https://github.com/greetgo/conf'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'greetgo'
            name 'Yevgeniy Kolpakov'
            email 'tech@greet-go.com'
          }
          developer {
            id 'yakzhanov'
            name 'Yerlan Akzhanov'
            email 'yakzhanov@greet-go.com'
          }
          developer {
            id 'mkasyanov'
            name 'Maxim Kasyanov'
            email 'mkasyanov@greet-go.com'
          }

        }
      }
    }
  }
}


